select name from watches where active = 1;
    for row in rows:
         select count(*),target,watcher_name from public.user_issues where watcher_name = row[name] group by target,watcher_name;
               --watcher_name='gyqv-maven-violation-watch'
         for row in rows
              --Insert into verizon.user_violation_watch_count
                 --Ignore the below step if its a cache repo
                          SELECT distinct sha256, issue_id as XRAYID, path as RepoFullPath, target as RepoName,
                                      watcher_id, watcher_name, severity
                              FROM public.user_issues where target like row[target]
                                             --target 	 '%gyqv-maven-violation-cpu-validation%';
                           --IF Target contains -prod in repo name
                                  -- Insert into verizon.user_violation_prod_Details
                           --ELSE
                                  -- Insert into verizon.user_violation_Details

select repo_name, vsad_name ,portfolio ,file_count ,size_in_gb ,updated_date  from public.vw_repo_file_size_info_daily order by size_in_gb::int desc;
python script for "i have 2 postgres databases Get the list of repos where size exceeds 1000 GB from 1st DB and store it in a Notification table in 2nd DB and get the emails from email table in 2nd DB where reponame in notification is matched and ignore if any email value is null  and send consolidated mail with notification table as attachment using smtp server" after sending mail update all records of stutus column in notification table as inactive

=========================================================

1.	Get the list of repos where size exceeds 1000 GB and store it in a Notification table - Tue
2.	Send a consolidated email for all the repo users about the storage utilization as a Warning 1 on Tuesday and marked all the records as InActive - Tue
3.	Get the list of repos where size exceeds 1000 GB and store it as Active in the same notification table - Thu
4.	Pick the repo list which are available from the 1st and 2nd set (We have to ignore the new repos that comes only in the 2nd set and also ignore the repos who has taken action and reduced the size) and store it in an Escalation table as Active records - Thu
5.	Send a consolidated email for all the repo users about the storage utilization as a Warning 2 on Thursday and let the users know it will be escalated to the leadership team
6.	Mark the existing records in the escalation table as InActive and Get the list of repos where size exceeds 1000 GB and store it as Active in the Escalation table  - Mon
7.	Pick the repo list from the 1st and 2nd set from the escalaltion table and send an escalation email to the portfolio leadership team by grouping the repo at portfolio level by CCing the repo users – Escalation 1 on Monday
8.	Get the list of repos where size exceeds 1000 GB and store it as Active in the Escalation table 
9.	Pick the repo list from the 2nd and 3rd set from the Escalation table and group it a portfolio level by CCing the repo users – Escalation 2 on Thursday. Email should say that their repo will be BLACKED OUT on Saturday
10.	Get the list of repos where size exceeds 1000 GB and compare with the last data set in the Escalation table and  black out those repos on Saturday (Bi-Weekly activity) and let the leadership and repo users know about this Black Out through notification - Sat
===========================================================


1.	Get the list of repos(below columns repo_name, vsad_name, file_count, size_in_gb, updated_date) from vw_repo_file_size_info_daily table where size exceeds 1000 GB and store it in a Notification table - Tue
2.	get the list of emails from email1 table for which repos have more than 1000GB storage and Send a consolidated email for all the repo users about the storage utilization as a Warning 1 on Tuesday and marked all the records as warning1 in status column - Tue
3.	Get the list of repos where size exceeds 1000 GB and check the old data in the notification table and send a consolidated mail only to not reduced repos - Thu
4.	Pick the repo list which are available from the 1st and 2nd set (We have to ignore the new repos that comes only in the 2nd set and also ignore the repos who has taken action and reduced the size) and store it in an Escalation table as Active records - Thu
5.	Send a consolidated email for all the repo users about the storage utilization as a Warning 2 on Thursday and let the users know it will be escalated to the leadership team
6.	Mark the existing records in the escalation table as InActive and Get the list of repos where size exceeds 1000 GB and store it as Active in the Escalation table  - Mon
7.	Pick the repo list from the 1st and 2nd set from the escalaltion table and send an escalation email to the portfolio leadership team by grouping the repo at portfolio level by CCing the repo users – Escalation 1 on Monday
8.	Get the list of repos where size exceeds 1000 GB and store it as Active in the Escalation table 
9.	Pick the repo list from the 2nd and 3rd set from the Escalation table and group it a portfolio level by CCing the repo users – Escalation 2 on Thursday. Email should say that their repo will be BLACKED OUT on Saturday
10.	Get the list of repos where size exceeds 1000 GB and compare with the last data set in the Escalation table and  black out those repos on Saturday (Bi-Weekly activity) and let the leadership and repo users know about this Black Out through notification - Sat

